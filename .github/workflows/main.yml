name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
      shell: powershell

    - name: Extract ngrok
      run: Expand-Archive ngrok.zip -DestinationPath ngrok
      shell: powershell

    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      shell: powershell

    - name: Enable RDP (Terminal Services) and firewall
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
      shell: powershell

    - name: Ensure runner user exists and set password
      run: |
        # Create or update user runneradmin with password
        if (Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue) {
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
        } else {
          New-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force) -FullName "Runner Admin" -Description "User for RDP"
          Add-LocalGroupMember -Group "Administrators" -Member "runneradmin"
        }
      shell: powershell

    - name: Download Pekora Launcher
      run: Invoke-WebRequest -Uri https://github.com/KoroneX/Korone-Bootstrapper/releases/download/v1.7.0.3/PekoraPlayerLauncher-x64.zip -OutFile pekora.zip
      shell: powershell

    - name: Extract Pekora Launcher
      run: Expand-Archive pekora.zip -DestinationPath PekoraLauncher
      shell: powershell

    - name: Install / Start Pekora Launcher
      run: |
        # Find an exe inside the extracted folder and try to run it
        $exe = Get-ChildItem -Path PekoraLauncher -Recurse -Filter *.exe | Select-Object -First 1
        if ($null -eq $exe) {
           Write-Error "No .exe found inside PekoraLauncher — check the zip contents."
          exit 1
        }
        Write-Host "Found: $($exe.FullName) - attempting to run."
        Start-Process -FilePath $exe.FullName -ArgumentList "" -NoNewWindow -PassThru

        # Note: some launchers require UI or manual installation — adjust as needed
      shell: powershell

    - name: Start ngrok tunnel in background (TCP 3389)
      run: |
        # Start ngrok in background for port 3389
        $ngrokPath = Join-Path $PWD 'ngrok\ngrok.exe'
        if (-Not (Test-Path $ngrokPath)) {
          Write-Error "ngrok not found at $ngrokPath"
          exit 1
        }
        # Start ngrok in background
        Start-Process -FilePath $ngrokPath -ArgumentList "tcp 3389" -WindowStyle Hidden
        Write-Host "ngrok started in background."
      shell: powershell

    - name: Wait for ngrok API and print public address (host:port)
      run: |
        $api = 'http://127.0.0.1:4040/api/tunnels'
        $maxAttempts = 30
        $attempt = 0
        $tunnel = $null

        while ($attempt -lt $maxAttempts -and $null -eq $tunnel) {
          try {
            Start-Sleep -Seconds 2
            $resp = Invoke-RestMethod -Uri $api -UseBasicParsing -ErrorAction Stop
            # ngrok v3 may return a "tunnels" array; we look for a tcp tunnel
            if ($resp -and $resp.tunnels) {
              foreach ($t in $resp.tunnels) {
                if ($t.public_url -and $t.public_url -match '^tcp://') {
                  $tunnel = $t
                  break
                }
              }
            }
          } catch {
            # not ready yet
          }
          $attempt++
        }

        if ($null -eq $tunnel) {
          Write-Error "Could not get ngrok tunnel via API at $api (attempts: $attempt)."
          exit 1
        }

        # public_url example: tcp://0.tcp.ngrok.io:12345
        $public = $tunnel.public_url
        Write-Host "ngrok public_url: $public"

        # extract host and port
        $noProto = $public -replace '^tcp://',''
        $parts = $noProto.Split(':')
        $host = $parts[0]
        $port = $parts[1]
        $rdpAddress = "$host`:$port"

        # print clearly for users
        Write-Host " === RDP ADDRESS (use this to connect via RDP) ==="
        Write-Host $rdpAddress
        Write-Host " ================================================"

        # export as step output if needed in later steps
        Write-Output ("::set-output name=rdp_address::" + $rdpAddress)
      shell: powershell

    - name: Show RDP address in logs
      run: |
        Write-Host "RDP address already printed above — look for 'RDP ADDRESS' in the logs."
      shell: powershell
